package electrolysis;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.*;
import java.util.StringTokenizer;
import javax.swing.*;
/**
 *
 * @author ASPIRE P2QG
 */
public class MetalProdCalcHistory extends javax.swing.JFrame {
    public static String userEmail;
    /**
     * Creates new form StartingFrame
     */
    public MetalProdCalcHistory() {
        initComponents();
        setLocationRelativeTo(null);
        showAllHistory();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainBackgroundPanel = new javax.swing.JPanel();
        menuPanel = new javax.swing.JPanel();
        calculatorButton = new javax.swing.JButton();
        historyButton = new javax.swing.JButton();
        productionButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        historyTA = new javax.swing.JTextArea();
        filterByDateButtton = new javax.swing.JButton();
        clearHistoryButton = new javax.swing.JButton();
        showHistoryButtton = new javax.swing.JButton();
        dayTF = new javax.swing.JTextField();
        yearTF = new javax.swing.JTextField();
        monthTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sciencebook");
        setBackground(new java.awt.Color(47, 87, 85));
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);
        setSize(new java.awt.Dimension(600, 450));

        mainBackgroundPanel.setBackground(new java.awt.Color(38, 38, 38));
        mainBackgroundPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 102), 10));
        mainBackgroundPanel.setPreferredSize(new java.awt.Dimension(766, 450));

        menuPanel.setBackground(new java.awt.Color(0, 51, 51));
        menuPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 130, 130), 4), " SCIENCEBOOK: METAL PRODUCTION CALCULATOR ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Franklin Gothic Demi", 0, 18), new java.awt.Color(0, 255, 255))); // NOI18N
        menuPanel.setForeground(new java.awt.Color(0, 51, 51));

        calculatorButton.setBackground(new java.awt.Color(0, 255, 255));
        calculatorButton.setFont(new java.awt.Font("Franklin Gothic Heavy", 0, 24)); // NOI18N
        calculatorButton.setForeground(new java.awt.Color(0, 51, 51));
        calculatorButton.setText("CALCULATOR");
        calculatorButton.setBorder(null);
        calculatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculatorButtonActionPerformed(evt);
            }
        });

        historyButton.setBackground(new java.awt.Color(0, 204, 204));
        historyButton.setFont(new java.awt.Font("Franklin Gothic Heavy", 0, 24)); // NOI18N
        historyButton.setForeground(new java.awt.Color(0, 51, 51));
        historyButton.setText("HISTORY");
        historyButton.setBorder(null);

        productionButton.setBackground(new java.awt.Color(0, 255, 255));
        productionButton.setFont(new java.awt.Font("Franklin Gothic Heavy", 0, 24)); // NOI18N
        productionButton.setForeground(new java.awt.Color(0, 51, 51));
        productionButton.setText("SUMMARY");
        productionButton.setBorder(null);
        productionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(calculatorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(historyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(productionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calculatorButton)
                    .addComponent(historyButton)
                    .addComponent(productionButton))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        exitButton.setBackground(new java.awt.Color(0, 204, 204));
        exitButton.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        exitButton.setForeground(new java.awt.Color(38, 38, 38));
        exitButton.setText("Go Back to Helpers Menu");
        exitButton.setBorder(null);
        exitButton.setBorderPainted(false);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(null);

        historyTA.setEditable(false);
        historyTA.setBackground(new java.awt.Color(51, 51, 51));
        historyTA.setColumns(20);
        historyTA.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 16)); // NOI18N
        historyTA.setForeground(new java.awt.Color(255, 255, 255));
        historyTA.setRows(5);
        historyTA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 255), 4), " HISTORY ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Franklin Gothic Demi", 0, 18), new java.awt.Color(0, 255, 255))); // NOI18N
        jScrollPane1.setViewportView(historyTA);

        filterByDateButtton.setBackground(new java.awt.Color(0, 255, 255));
        filterByDateButtton.setFont(new java.awt.Font("Franklin Gothic Heavy", 2, 18)); // NOI18N
        filterByDateButtton.setForeground(new java.awt.Color(38, 38, 38));
        filterByDateButtton.setText("FILTER BY DATE");
        filterByDateButtton.setBorder(null);
        filterByDateButtton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByDateButttonActionPerformed(evt);
            }
        });

        clearHistoryButton.setBackground(new java.awt.Color(0, 255, 255));
        clearHistoryButton.setFont(new java.awt.Font("Franklin Gothic Heavy", 2, 18)); // NOI18N
        clearHistoryButton.setForeground(new java.awt.Color(38, 38, 38));
        clearHistoryButton.setText("CLEAR HISTORY");
        clearHistoryButton.setBorder(null);
        clearHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearHistoryButtonActionPerformed(evt);
            }
        });

        showHistoryButtton.setBackground(new java.awt.Color(0, 255, 255));
        showHistoryButtton.setFont(new java.awt.Font("Franklin Gothic Heavy", 2, 18)); // NOI18N
        showHistoryButtton.setForeground(new java.awt.Color(38, 38, 38));
        showHistoryButtton.setText("SHOW ALL HISTORY");
        showHistoryButtton.setBorder(null);
        showHistoryButtton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHistoryButttonActionPerformed(evt);
            }
        });

        dayTF.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        dayTF.setForeground(new java.awt.Color(38, 38, 38));
        dayTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dayTF.setText("dd");
        dayTF.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 1, 0, 1));
        dayTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dayTFMouseClicked(evt);
            }
        });

        yearTF.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        yearTF.setForeground(new java.awt.Color(38, 38, 38));
        yearTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        yearTF.setText("yy");
        yearTF.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 1, 0, 1));
        yearTF.setPreferredSize(new java.awt.Dimension(35, 21));
        yearTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                yearTFMouseClicked(evt);
            }
        });

        monthTF.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        monthTF.setForeground(new java.awt.Color(38, 38, 38));
        monthTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        monthTF.setText("mm");
        monthTF.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 1, 0, 1));
        monthTF.setPreferredSize(new java.awt.Dimension(35, 21));
        monthTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                monthTFMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mainBackgroundPanelLayout = new javax.swing.GroupLayout(mainBackgroundPanel);
        mainBackgroundPanel.setLayout(mainBackgroundPanelLayout);
        mainBackgroundPanelLayout.setHorizontalGroup(
            mainBackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainBackgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainBackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainBackgroundPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(mainBackgroundPanelLayout.createSequentialGroup()
                        .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainBackgroundPanelLayout.createSequentialGroup()
                        .addGroup(mainBackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainBackgroundPanelLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(dayTF, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(monthTF, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yearTF, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainBackgroundPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(filterByDateButtton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)))
                        .addGroup(mainBackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(mainBackgroundPanelLayout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainBackgroundPanelLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(showHistoryButtton, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(clearHistoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(21, 21, 21))))
        );

        mainBackgroundPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dayTF, monthTF, yearTF});

        mainBackgroundPanelLayout.setVerticalGroup(
            mainBackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainBackgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainBackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainBackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filterByDateButtton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(clearHistoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(showHistoryButtton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(mainBackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainBackgroundPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainBackgroundPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(mainBackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(dayTF)
                            .addComponent(yearTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(monthTF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(49, 49, 49))
        );

        mainBackgroundPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {monthTF, yearTF});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainBackgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainBackgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static void showAllHistory() {
        File metalProdFile = new File("metalProduction.txt");
        String line;
        historyTA.setText("");
        try{
            //EXCEPTION HANDLING
            if(!metalProdFile.exists()) {
                metalProdFile.createNewFile();
            }
            
            //READING THE FILE
            FileReader fileR = new FileReader(metalProdFile);
            BufferedReader reader = new BufferedReader(fileR);
            while((line=reader.readLine())!=null) {
                if(line.contains(userEmail)) {
                    StringTokenizer strTokenizer = new StringTokenizer(line, "'");
                    String email = "" + strTokenizer.nextElement();
                    String metal = "" + strTokenizer.nextElement();
                    double current = Double.parseDouble("" + strTokenizer.nextElement());
                    double time = Double.parseDouble("" + strTokenizer.nextElement());
                    double metalProduced = Double.parseDouble("" + strTokenizer.nextElement());
                    String date = "" + strTokenizer.nextElement();
                    historyTA.append("  " + date + "   " + String.format("%,.2fg", metalProduced) + " of " + metal + "(s)   [I=" + String.format("%,.2fA", current) + "; t=" + String.format("%,.2fhrs", time) + "]\n");
                }
                
            }
            
            //CLOSING
            fileR.close();
            reader.close();
        } catch(IOException e){
            JOptionPane.showMessageDialog(null, "IOException");
        }
    }
    
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        new Menu1stFrame().setVisible(true);
        Menu1stFrame.setName();
        this.setVisible(false);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void filterByDateButttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByDateButttonActionPerformed
        File metalProdFile = new File("metalProduction.txt");
        String line;
        historyTA.setText("");
        try{
            //EXCEPTION HANDLING
            if(!metalProdFile.exists()) {
                metalProdFile.createNewFile();
            }
            int day = Integer.parseInt(dayTF.getText());
            int month = Integer.parseInt(monthTF.getText());
            int year = Integer.parseInt(yearTF.getText());
            
            if(monthTF.getText().equals("") || dayTF.getText().equals("") || yearTF.getText().equals("") || monthTF.getText().length()!=2 || dayTF.getText().length()!=2 || yearTF.getText().length()!=2) {
                throw new WrongDateException();
            }
            
            if(Integer.parseInt(dayTF.getText()) > 31 || Integer.parseInt(monthTF.getText()) > 12 || Integer.parseInt(monthTF.getText()) == 0 || Integer.parseInt(dayTF.getText()) == 0) {
                throw new DateNotExistException();
            }
            if((Integer.parseInt(monthTF.getText()) == 4 || Integer.parseInt(monthTF.getText()) == 6 || Integer.parseInt(monthTF.getText()) == 9 || Integer.parseInt(monthTF.getText()) == 11) && Integer.parseInt(dayTF.getText()) >= 31){
                throw new DateNotExistException();
            }
            else if (Integer.parseInt(monthTF.getText()) == 2){
                if (Integer.parseInt(yearTF.getText())%4 != 0 && Integer.parseInt(dayTF.getText()) >28){
                    throw new DateNotExistException();
                }
                else if (Integer.parseInt(yearTF.getText())%4 == 0 && Integer.parseInt(dayTF.getText()) >29){
                    throw new DateNotExistException();
                }
            }
            
            //FILTER AND OUTPUT HISTORY
            FileReader fileR = new FileReader(metalProdFile);
            BufferedReader reader = new BufferedReader(fileR);
            String dateInput;
            
            while((line=reader.readLine())!=null) {
                dateInput = dayTF.getText() + "/" + monthTF.getText() + "/" + yearTF.getText();
                if(line.contains(dateInput) && line.contains(userEmail)) {
                    StringTokenizer strTokenizer = new StringTokenizer(line, "'");
                    String email = "" + strTokenizer.nextElement();
                    String metal = "" + strTokenizer.nextElement();
                    double current = Double.parseDouble("" + strTokenizer.nextElement());
                    double time = Double.parseDouble("" + strTokenizer.nextElement());
                    double metalProduced = Double.parseDouble("" + strTokenizer.nextElement());
                    String date = "" + strTokenizer.nextElement();
                    historyTA.append("  " + date + "   " + String.format("%,.2fg", metalProduced) + " of " + metal + "(s)   [I=" + String.format("%,.2fA", current) + "; t=" + String.format("%,.2fhrs", time) + "]\n");
                }
            }
            
            //CLOSING
            fileR.close();
            reader.close();
        } catch(IOException e){
            JOptionPane.showMessageDialog(null, "IOException");
        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "The input in the number fields should be numbers.", "Notification", JOptionPane.INFORMATION_MESSAGE);
        } catch(WrongDateException ex) {
            JOptionPane.showMessageDialog(this, "Please fill in date with the correct format (mm/dd/yy).", "Notification", JOptionPane.INFORMATION_MESSAGE);
        } catch(DateNotExistException ex) {
            JOptionPane.showMessageDialog(this, "That date does not exist.", "Notification", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_filterByDateButttonActionPerformed

    private void clearHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearHistoryButtonActionPerformed
        File metalProdFile = new File("metalProduction.txt");
        try{
            //EXCEPTION HANDLING
            if(!metalProdFile.exists()) {
                metalProdFile.createNewFile();
            }
            
            //DELETING THE HISTORY
            FileReader fileR = new FileReader(metalProdFile);
            BufferedReader reader = new BufferedReader(fileR);
            StringBuffer buffer = new StringBuffer();
            String line;
            
            while ((line=reader.readLine()) != null){
                if(!line.contains(userEmail)) {
                    buffer.append(line);
                    buffer.append("\r");
		}
            }
			
            String fileContents = buffer.toString();
            fileR.close();
            reader.close();
            FileWriter fileW = new FileWriter(metalProdFile);
            fileW.write(fileContents);
            fileW.flush();
            fileW.close();
            JOptionPane.showMessageDialog(this, "History successfully cleared.");
            
            //CLOSING
            fileR.close();
            reader.close();
        } catch(IOException e){
            JOptionPane.showMessageDialog(null, "IOException");
        }
        
        historyTA.setText("");
    }//GEN-LAST:event_clearHistoryButtonActionPerformed

    private void calculatorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculatorButtonActionPerformed
        new MetalProdCalcCalculator().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_calculatorButtonActionPerformed

    private void showHistoryButttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showHistoryButttonActionPerformed
        showAllHistory();
    }//GEN-LAST:event_showHistoryButttonActionPerformed

    private void dayTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dayTFMouseClicked
        dayTF.setText("");
    }//GEN-LAST:event_dayTFMouseClicked

    private void yearTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yearTFMouseClicked
        yearTF.setText("");
    }//GEN-LAST:event_yearTFMouseClicked

    private void monthTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthTFMouseClicked
        monthTF.setText("");
    }//GEN-LAST:event_monthTFMouseClicked

    private void productionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productionButtonActionPerformed
        new MetalProdCalcSummary().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_productionButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IndexFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calculatorButton;
    private javax.swing.JButton clearHistoryButton;
    private javax.swing.JTextField dayTF;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton filterByDateButtton;
    private javax.swing.JButton historyButton;
    public static javax.swing.JTextArea historyTA;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainBackgroundPanel;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JTextField monthTF;
    private javax.swing.JButton productionButton;
    private javax.swing.JButton showHistoryButtton;
    private javax.swing.JTextField yearTF;
    // End of variables declaration//GEN-END:variables

}

